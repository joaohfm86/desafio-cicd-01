name: Execução de testes
on:
    workflow_call:
jobs:
    unit-test:
        name: Teste de unidade
        runs-on: ubuntu-latest
        steps:
            - name: Obtendo o código do projeto
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"
            - name: Execução do teste de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj
    integration-test:
      name: Teste de integração
      runs-on: ubuntu-latest
      services:
        postgre:
          image: postgres:latest
          ports:
            - 5432:5432
          env:
            POSTGRES_USER: review
            POSTGRES_PASSWORD: Passw0rd2023!
            POSTGRES_DB: review
      steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: "8.0.300"
        - name: Execução do teste de integração
          working-directory: ./src
          run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
          env:
            ConnectionStrings_DefaultConnection: "Host=localhost;Port=5432;Database=review;Username=review;Password=Passw0rd2023!"
    SonarQube:
      name: Scan com o sonarqube
      runs-on: ubuntu-latest
      steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4
        - name: setup JDK
          uses: actions/setup-java@v4
          with:
            distribution: adopt
            java-version: '21'
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: "8.0.300"
        - name: Instalação do sonarqube scanner
          run: dotnet tool install --global dotnet-sonarscanner
        - name: Build e análise
          working-directory: ./src
          run: |
            dotnet sonarscanner begin /o:"joaohfm86" /k:"joaohfm86_desafio-cicd-01" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
            dotnet build Review-Filmes.sln
            dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        - name: Verificação do Quality gate
          uses: sonarsource/sonarqube-quality-gate-action@master
          id: sonarqube-quality-gate-check
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          with:
            scanMetadataReportFile: ./src/.sonarqube/out/.sonar/report-task.txt
        - name: "Exibir status quality gate"
          if: ${{ always() }}
          run: echo "O status do quality gate é ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

          


